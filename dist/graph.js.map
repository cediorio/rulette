{"version":3,"sources":["../src/graph.js"],"names":["Graph","constructor","args","name","_name","_adjList","value","nodeNames","Object","keys","createNode","nodeType","console","log","n","Node","addNode","node","addEdge","vertex1","vertex2","push","Error","adjList","evalNode","recStack","_uniqueName","takenNames","proposedName","_defaultName","randomWordLen","charNum","e","rMin","rMax","tMin","tMax","String","fromCharCode","parseInt","i","Math","random"],"mappings":"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","sourcesContent":["/* Nodes are of type 'op'{erator} or 'prop'{osition}\n */\nexport class Graph {\n    constructor(args = {name: ''}) {\n\tthis._name = args.name;\n\tthis._adjList = {};\n    }\n\n    get name() {\n\treturn this._name;\n    }\n\n    set name(value) {\n\tthis._name = value;\n    }\n\n    get nodeNames() {\n\treturn Object.keys(this._adjList);\n    }\n    \n    createNode( args = {name: null, nodeType: null, value: null} ) {\n\targs['nodeNames'] = this.nodeNames;\n\tconsole.log(this.nodeNames);\n\tlet n = new Node(args);\n\tthis.addNode(n);\n\treturn n;\n    }\n    \n    addNode(node) {\n\tthis._adjList[node.name] = [];\n    }\n\n    addEdge( args = { vertex1: null, vertex2: null } ) {\n    \tlet { vertex1, vertex2 } = args;\n    \tif ( typeof vertex1 !== 'undefined' && typeof vertex2 !== 'undefined' ) {\n    \t    this._adjList[vertex1.name].push(vertex2.name);\n    \t}\n    \telse {\n    \t    throw new Error(\"addEdge requires two nodes/vertices to create an edge\");\n    \t}\n    }\n    \n    get adjList() {\n\treturn this._adjList;\n    }\n\n    evalNode ( args = {n:n, recStack: recStack, adjList: adjList} ) {\n\tif (args.n.value) return true;\n\tif (typeof recStack === 'undefined') recStack = adjList[args.n];\n\tconsole.log(`adjList contents: ${adjList[args.n]}`);\n\treturn recStack;\n    }\n}\n\nexport class Node {\n    constructor( args = {name: null, nodeType: 'prop', value: null, nodeNames: null})  {\n\tlet {name, nodeType, value, nodeNames} = args;\n\tif ( typeof name !== 'undefined' ) this.name = name;\n\telse {\n\t    this.name = _uniqueName(nodeNames);\n\t}\n\tthis.nodeType = args.nodeType === 'op' ? 'op' : 'prop';\n\tthis.value = typeof value !== 'undefined' ? value : false;\n    }\n}\n\nconst _uniqueName = ( takenNames ) => {\n    let proposedName = _defaultName();\n    if ( proposedName in takenNames ) _uniqueName( takenNames );\n    else return proposedName;\n};\n\nconst _defaultName = () => {\n    // get a random char number between 65 to 122\n    // thx to https://stats.stackexchange.com/questions/281162/scale-a-number-between-a-range\n    let randomWordLen = 10;\n    let charNum = (e) => {\n\tconst rMin = 0, rMax = 1, tMin = 97, tMax = 122; // 97 to 122 is 'a' to 'z'\n\treturn String.fromCharCode( parseInt( ((e - rMin)/(rMax - rMin)) * (tMax - tMin) + tMin ) );\n    };\n    var name = '';\n    for(let i=0; i < randomWordLen; i++) {\n\tname += charNum(Math.random());\n    }\n\n    return name;\n}\n"],"file":"graph.js"}